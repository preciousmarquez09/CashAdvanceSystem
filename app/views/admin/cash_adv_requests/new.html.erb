<div class="p-10">
  <div class="relative overflow-hidden shadow-md sm:rounded-lg p-8 border-t border-gray-200">
    <div class="flex justify-between items-center gap-6 md:flex-nowrap mb-5">
      <p class="text-xl font-bold">Cash Advance Request</p>
      <%= link_to admin_cash_adv_requests_path, class: "bg-gray-500 text-white font-semibold px-4 py-2 rounded-lg hover:bg-black flex items-center space-x-2 w-fit sm:w-auto" do %>
        <i class="bi bi-arrow-left"></i> 
        <span>Back</span>
      <% end %>
    </div>

    <%= form_for @cash_adv_request, url: admin_cash_adv_requests_path, method: :post, html: { multipart: true } do |f| %>

    <!-- Input Fields -->
      <div class="w-full md:w-full mb-8">
        <%= f.label :request_reason, class: "block mb-1 text-sm font-medium text-gray-900 dark:text-white" do %>
          Reason <span class="text-red-500">*</span>
        <% end %>
        <%= f.text_area :request_reason, required: true, class: "h-36 bg-gray-50 border border-gray-300 text-gray-900 rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" %>
        <% if @cash_adv_request.errors[:request_reason].present? %>
          <p class="text-red-500 text-xs mt-1 ml-2"><%= @cash_adv_request.errors.full_messages_for(:request_reason).first %></p>
        <% end %>  
      </div>
      <div class="w-full md:w-full mb-8">
        <%= f.label :amount, class: "block mb-1 text-sm font-medium text-gray-900 dark:text-white" do %>
          Amount (Maximum Cash Advance: ₱
          <%= @user && @eligibility ? (@user.net_salary * (@eligibility.percentage_cash_limit / 100.0)).to_i : 0 %>)
          <span class="text-red-500">*</span>
        <% end %>
        <div class="relative">
          <%= f.number_field :amount, id: "amount", required: true, max: (@user && @eligibility ? (@user.net_salary * (@eligibility.percentage_cash_limit / 100.0)).to_i : 0) , placeholder: "Maximum Cash Advance: ₱#{(@user.net_salary * (@eligibility.percentage_cash_limit / 100.0)          ).to_i}",
          class: " bg-gray-50 border border-gray-300 text-gray-900 rounded-lg placeholder:text-sm focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 pr-10 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" %>
          <span class="absolute inset-y-0 right-3 flex items-center text-gray-500 dark:text-gray-400"> ₱ </span>
        </div>
        <% if @cash_adv_request.errors[:amount].present? %>
          <p class="text-red-500 text-xs mt-1 ml-2"><%= @cash_adv_request.errors.full_messages_for(:amount).first %></p>
        <% end %>  
      </div>

      <div class="w-full md:w-full mb-3">
        <%= f.label :cut_off, class: "block mb-1 text-sm font-medium text-gray-900 dark:text-white" do %>
          Monthly Terms <span class="text-red-500">*</span>
          <em > Choose monthly terms to show repayment terms button to compute</em>
        <% end %>
       <%= f.select :cut_off,  options_for_select([['Monthly', 'monthly'], ['Cut-off (15 / 30)', 'cutoff']], @cash_adv_request.cut_off), { prompt: "Select Monthly Terms" }, 
          { id: "cut_off", required: true, class: "bg-gray-50 border border-gray-300 text-gray-900 rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" } %>

        <% if @cash_adv_request.errors[:cut_off].present? %>
          <p class="text-red-500 text-xs mt-1 ml-2"><%= @cash_adv_request.errors.full_messages_for(:cut_off).first %></p>
        <% end %>  
      </div>

      <!-- Radio Buttons -->
      <div class="w-full p-2">
        <div id="interest-container" class="mb-4"></div>
        <div id="radio-buttons" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 mb-2"></div>
        <% if @cash_adv_request.errors[:repayment_months].present? %>
          <p class="text-red-500 text-xs mt-1 ml-2"><%= @cash_adv_request.errors.full_messages_for(:repayment_months).first %></p>
        <% end %>  
        <%= f.hidden_field :repayment_months, id: "repayment_months" %>
        <%= f.hidden_field :monthly_cost, id: "monthly_cost" %>
      </div>

      <!-- File Upload -->
      <%= f.label "Supporting Documents", class: "block mb-2 text-sm font-medium text-gray-900 dark:text-white" %>
      <div class="flex flex-col sm:flex-row items-center w-full mb-5 space-y-4 sm:space-y-0 sm:space-x-5">
        <div class="relative w-full sm:w-1/3">
          <label for="attachment_1" id="attachment_label" class="flex flex-col items-center justify-center w-full h-48 sm:h-80 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 dark:hover:bg-gray-800 dark:bg-gray-700 hover:bg-gray-100 dark:border-gray-600 dark:hover:border-gray-500 dark:hover:bg-gray-600">
            <div id="upload-placeholder-1" class="flex flex-col items-center justify-center pt-5 pb-6">
              <svg class="mb-2 text-gray-500 dark:text-gray-400 w-10 h-10" aria-hidden="true" fill="none" viewBox="0 0 20 16">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2"/>
              </svg>
              <p class="text-sm text-gray-500 dark:text-gray-400 text-center">Click to upload profile picture</p>
              <p class="text-sm text-gray-500 dark:text-gray-400 text-center font-semibold">Only accept PNG, JPG, JPEG, PDF</p>
            </div>
  
            <img id="preview-file-1" class="hidden w-full h-full object-contain" />
            <%= f.file_field :attachments, name: "attachments[]", id: "attachment_1", class: "hidden", accept: '.png, .jpg, .jpeg, .pdf', onchange: "previewFile(event, 1)" %>
          </label>
  
          <button id="remove-file-1" type="button" onclick="removeFile(1)" class="hidden absolute top-2 right-2 bg-gray-500 text-white text-xs font-bold rounded-full w-6 h-6 flex items-center justify-center shadow-md hover:bg-gray-700">×</button>
        </div>
  
        <div class="relative w-full sm:w-1/3">
          <label for="attachment_2" id="attachment_label" class="flex flex-col items-center justify-center w-full h-48 sm:h-80 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 dark:hover:bg-gray-800 dark:bg-gray-700 hover:bg-gray-100 dark:border-gray-600 dark:hover:border-gray-500 dark:hover:bg-gray-600">
            <div id="upload-placeholder-2" class="flex flex-col items-center justify-center pt-5 pb-6">
              <svg class="mb-2 text-gray-500 dark:text-gray-400 w-10 h-10" aria-hidden="true" fill="none" viewBox="0 0 20 16">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2"/>
              </svg>
              <p class="text-sm text-gray-500 dark:text-gray-400 text-center">Click to upload profile picture</p>
              <p class="text-sm text-gray-500 dark:text-gray-400 text-center font-semibold">Only accept PNG, JPG, JPEG, PDF</p>
            </div>
  
            <img id="preview-file-2" class="hidden w-full h-full object-contain" />
            <%= f.file_field :attachments, name: "attachments[]", id: "attachment_2", class: "hidden", accept: '.png, .jpg, .jpeg, .pdf', onchange: "previewFile(event, 2)" %>
          </label>
  
          <button id="remove-file-2" type="button" onclick="removeFile(2)" class="hidden absolute top-2 right-2 bg-gray-500 text-white text-xs font-bold rounded-full w-6 h-6 flex items-center justify-center shadow-md hover:bg-gray-700">×</button>
        </div>
  
        <div class="relative w-full sm:w-1/3">
          <label for="attachment_3" id="attachment_label" class="flex flex-col items-center justify-center w-full h-48 sm:h-80 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 dark:hover:bg-gray-800 dark:bg-gray-700 hover:bg-gray-100 dark:border-gray-600 dark:hover:border-gray-500 dark:hover:bg-gray-600">
            <div id="upload-placeholder-3" class="flex flex-col items-center justify-center pt-5 pb-6">
              <svg class="mb-2 text-gray-500 dark:text-gray-400 w-10 h-10" aria-hidden="true" fill="none" viewBox="0 0 20 16">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2"/>
              </svg>
              <p class="text-sm text-gray-500 dark:text-gray-400 text-center">Click to upload profile picture</p>
              <p class="text-sm text-gray-500 dark:text-gray-400 text-center font-semibold">Only accept PNG, JPG, JPEG, PDF</p>
            </div>
  
            <img id="preview-file-3" class="hidden w-full h-full object-contain" />
            <%= f.file_field :attachments, name: "attachments[]", id: "attachment_3", class: "hidden", accept: '.png, .jpg, .jpeg, .pdf', onchange: "previewFile(event, 3)" %>
          </label>
  
          <button id="remove-file-3" type="button" onclick="removeFile(3)" class="hidden absolute top-2 right-2 bg-gray-500 text-white text-xs font-bold rounded-full w-6 h-6 flex items-center justify-center shadow-md hover:bg-gray-700">×</button>
        </div>
      </div>

      <div class="p-3 flex justify-center">
        <%= f.submit "Submit Request", id: "submit-btn", class: "p-3 bg-green-500 text-white font-bold rounded-lg w-3/4 cursor-pointer" %>
      </div>
    <% end %>

  </div>
</div>

<div id="user-data" data-user="<%= @user.to_json %>"></div>
<div id="eligibility-data" data-eligibility="<%= @eligibility.to_json %>"></div>

<script>
document.addEventListener("turbolinks:load", function() {
  let submitButton = document.getElementById("submit-btn");

  if (!submitButton) return;

  submitButton.addEventListener("click", function(event) {
    event.preventDefault();

    Swal.fire({
      title: "Are you sure?",
      text: "Do you want to submit this request?",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#28a745",
      cancelButtonColor: "#d33",
      confirmButtonText: "Yes, submit it!",
      cancelButtonText: "Cancel"
    }).then((result) => {
      if (result.isConfirmed) {
        submitButton.closest("form").submit();
      }
    });
  });
});

let userElement = document.getElementById("user-data"); 
let user = JSON.parse(userElement.dataset.user);
console.log(user);

let eligibilityElement = document.getElementById("eligibility-data"); 
let eligibility = JSON.parse(eligibilityElement.dataset.eligibility);
console.log(eligibility);
let interest = eligibility.interest_rate / 100;


// select months and amount to calculate 30% of net salary
document.addEventListener("turbolinks:load", function () {
  let selectElement = document.getElementById("cut_off");
  let amountElement = document.getElementById("amount");

  // Retrieve previously entered values after a validation error
  let cut_off = selectElement.value;
  let amountValue = amountElement.value;
  let amount = amountValue === "" ? 0 : parseFloat(amountValue);

  // Ensure radio buttons regenerate on page load
  calculate30Percent(amount, cut_off);

  selectElement.addEventListener("change", function () {
    let cut_off = this.value;
    let amountValue = amountElement.value;
    let amount = amountValue === "" ? 0 : parseFloat(amountValue);

    calculate30Percent(amount, cut_off);
  });

  amountElement.addEventListener("input", function () {
    this.value = this.value.replace(/[^0-9]/g, ""); 
    let max = parseInt(amountElement.max, 10);
    let currentValue = parseInt(amountElement.value, 10);

    if (currentValue > max) {
      amountElement.value = max;
    }

    let cut_off = selectElement.value;
    let amountValue = amountElement.value;
    let amount = amountValue === "" ? 0 : parseFloat(amountValue);

    if (!isNaN(amount) && cut_off) {
      calculate30Percent(amount, cut_off);
    }
  });
});


function calculate30Percent(amount, cut_off) {
  const container = document.getElementById("radio-buttons");
  const interestContainer = document.getElementById("interest-container");

  // If no cut_off is selected, remove radio buttons and interest amount
  if (!cut_off) {
    container.innerHTML = "";
    interestContainer.innerHTML = "";
    return;
  }

  if (cut_off == "cutoff") {
    createRadioButton(1, amount, "Cut-off")
  } else if (cut_off == "monthly"){
    if (amount > (0.3 * user.net_salary)){
      createRadioButton(2, amount, "Monthly")
    } else {
      createRadioButton(1, amount, "Monthly")
    }
  } 
}

function createRadioButton(months, amount, terms) {
    const container = document.getElementById("radio-buttons");
    const interestContainer = document.getElementById("interest-container");
    const selectedRepaymentField = document.querySelector("input[name='cash_adv_request[repayment_months]']");
    const selectedMonthlyCost = document.querySelector("input[name='cash_adv_request[monthly_cost]']");

    container.innerHTML = "";
    interestContainer.innerHTML = "";

    let interestAmount = interest * amount;
    amount += interestAmount;

    if (amount > 0 && months) {
      
      const text = document.createElement("input");
      text.type = "text";
      text.name = "cash_adv_request[interest_amount]";
      text.value = interestAmount.toFixed(2);
      text.id = "interest_amount";
      text.classList.add("hidden");

      const label = document.createElement("label");
      label.setAttribute("for", "interest_amount");
      label.innerHTML = "Interest Amount:  ₱" + interestAmount.toFixed(2);
      label.classList.add("font-bold", "mt-5");

      interestContainer.appendChild(label);
      interestContainer.appendChild(text);
      

        for (let i = months; i <= 3; i++) {
            let monthlyCost = 0;

            if (terms === "Monthly") {
                monthlyCost = parseFloat((amount / i).toFixed(2));
            } else if (terms === "Cut-off") {
                monthlyCost = parseFloat((amount / (i * 2)).toFixed(2));
            }

            const radio = document.createElement("input");
            radio.type = "radio";
            radio.name = "cash_adv_request[repayment_months]";
            radio.value = i;
            radio.id = `repayment_${i}`;
            radio.classList.add("hidden", "peer");
            radio.setAttribute("monthly-cost", monthlyCost);

            // Update hidden field on change
            radio.addEventListener("change", function () {
                selectedRepaymentField.value = this.value;
                selectedMonthlyCost.value = this.getAttribute("monthly-cost");
            });

            const label = document.createElement("label");
            label.setAttribute("for", `repayment_${i}`);
            label.innerHTML = `<div class='text-lg font-semibold'>₱${monthlyCost} / ${terms === "Monthly" ? "Monthly" : "per Cut-Off"}</div><div class='text-sm'> ${i} ${i === 1 ? " Month" : " Months"}</div>`;
            label.classList.add("flex", "flex-col", "items-center", "justify-center", "p-4", "border", "rounded-lg", "cursor-pointer", "peer-checked:border-blue-600", "peer-checked:text-blue-600", "hover:bg-gray-100", "text-center", "w-full");

            const wrapper = document.createElement("div");
            wrapper.classList.add("flex", "flex-col", "items-center", "w-full");
            wrapper.appendChild(radio);
            wrapper.appendChild(label);

            container.appendChild(wrapper);
        }
    }
}

function previewFile(event, num) {
    const file = event.target.files[0];
    if (file) {
        const validTypes = ["image/png", "image/jpeg", "image/jpg", "application/pdf"];
        const maxSize = 20 * 1024 * 1024;

        if (!validTypes.includes(file.type)) {
            Swal.fire({
                icon: "error",
                title: "Invalid File Type",
                text: "Please upload an image in PNG, JPEG, JPG, or PDF format."
            });
            event.target.value = "";
            return;
        }

        if (file.size > maxSize) {
            Swal.fire({
                icon: "error",
                title: "File Too Large",
                text: "Please upload a file smaller than 20MB."
            });
            event.target.value = "";
            return;
        }

        const reader = new FileReader();
        reader.onload = function(e) {
            const previewContainer = document.getElementById(`preview-file-${num}`);
            previewContainer.classList.remove("hidden");

            if (file.type === "application/pdf") {
                previewContainer.outerHTML = `
                    <div id="preview-file-${num}" class="flex flex-col items-center justify-center w-full h-full p-4 bg-gray-100 rounded-lg">
                        <i class="bi bi-file-earmark-pdf-fill text-red-500 text-5xl"></i>
                        <p class="text-sm text-gray-700 mt-2 text-center">${file.name}</p>
                    </div>
                `;
            } else {
                previewContainer.src = e.target.result;
                previewContainer.classList.remove("hidden");
            }

            document.getElementById(`upload-placeholder-${num}`).classList.add("hidden");
            document.getElementById(`remove-file-${num}`).classList.remove("hidden");
        };
        reader.readAsDataURL(file);
    }
}

function removeFile(num) {
  document.getElementById(`attachment_${num}`).value = "";
  document.getElementById(`preview-file-${num}`).classList.add("hidden");
  document.getElementById(`upload-placeholder-${num}`).classList.remove("hidden");
  document.getElementById(`remove-file-${num}`).classList.add("hidden");
}

</script>